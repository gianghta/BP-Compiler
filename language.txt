<program> ::= <program_header> <program_body> .

<program_header> ::= program <identifier> is

 <program_body> ::=
           ( <declaration> ; )
       begin
           ( <statement> ; )
       end program
 


  <declaration> ::=
       [ global ] <procedure_declaration>
     | [ global ] <variable_declaration>
 


  <procedure_declaration> ::= <procedure_header> <procedure_body>
 

  <procedure_header> ::=
       procedure <identifier> : <type_mark> ( [<parameter_list>] )
 

  <parameter_list> ::=
       <parameter> , <parameter_list>
     | <parameter>
 

  <parameter> ::= <variable_declaration>
 

  <procedure_body> ::=
           ( <declaration> ; )
       begin
           ( <statement> ; )
       end procedure
 


  <variable_declaration> ::=
       variable <identifier> : <type_mark> [ [ <bound> ] ]
 


  <type_mark> ::=
       integer | float | string | bool
 

  <bound> ::= <number>
 


  <statement> ::=
       <assignment_statement>
     | <if_statement>
     | <loop_statement>
     | <return_statement>
 

 <assignment_statement> ::= <destination> := <expression>
 

 <destination> ::= <identifier> [ [ <expression> ] ]
 

 <if_statement> ::=
       if ( <expression> ) then ( <statement> ; )
       [ else ( <statement> ; ) ]
       end if


<loop_statement> ::=
    for ( <assignment_statement> ; <expression> )
        ( <statement> ; )
    end for


<return_statement> ::= return <expression>

<identifier> ::= [a-zA-Z][a-zA-Z0-9_]


<expression> ::= [ not ] <arithOp> <expression_prime>

<expression_prime> ::=
    & <arithOp> <expression_prime>
    | | <arithOp> <expression_prime>
    | null

<arithOp> ::= <relation> <arithOp_prime>


<arithOp_prime> ::=
    + <relation> <arithOp_prime>
    | - <relation> <arithOp_prime>
    | null

<relation> ::= <term> <relation_prime>

<relation_prime> ::=
      <  <term> <relation_prime>
    | >= <term> <relation_prime>
    | <= <term> <relation_prime>
    | >  <term> <relation_prime>
    | == <term> <relation_prime>
    | != <term> <relation_prime>
    | null


<term> ::= <factor> <term_prime>


<term_prime> ::=
        * <factor> <term_prime>
    | / <factor> <term_prime>
    | null

<factor> ::=
        ( <expression> )
    | <procedure_call>
    | [ - ] <name>
    | [ - ] <number>
    | <string>
    | true
    | false
